if (args.size() == 0) {
    println "No input directory specified."
    return
}

FileFilter filter = { f ->
    if (f.isDirectory()) {
        if (f.name.startsWith('_')) return false
        if (f.name.startsWith('.')) return false
        if (f.name == 'assets') return false
        if (f.name == 'css') return false
        return true
    }
    else {
        return f.name.endsWith('.md')
    }
}

offset = args[0].length() + 1
Node root = new Node(null, new File(args[0]))
//File root = new File(args[0])
def stack = []
stack.push(root)
while (stack.size() > 0) {
    Node node = stack.pop()
    File file = node.name()
    if (file.isDirectory()) {
        //println "Directory ${file.path}"

        file.listFiles(filter).each {
            Node child = new Node(node, it)
            stack.push(child)
        }
    }
    else {
        node.value = process(file)
    }
}

println '''---
layout: default
title: Site Index
---

# Site Index

**Note** This file is machine generated by the `script/index.groovy` program and should not be edited.

'''
print(root, '')

return

void print(Node node, String indent) {
    comparator = { a,b ->
        Object av = a.value()
        Object bv = b.value()
        if ((av instanceof String) && (bv instanceof String)) {
            return av <=> bv
        }
        if (av instanceof String) {
            return -1
        }
        if (bv instanceof String) {
            return 1
        }
        return a.name().name <=> b.name().name
    }

    File file = node.name()
    if (file.name.endsWith('.md')) {

        println "${indent}-  [${node.value()}](${file.path.substring(offset)})"
    }
    else if (node.children().size() > 0) {
        print indent
        println('1. ' + file.name.capitalize())
        node.children().sort(comparator).each { print(it, indent + '   ')}
    }
}

String process(File file) {
//    println "Processing ${file.path}"
    if (!file.isFile()) {
        return 'Not a file'
    }
    List<String> lines = file.readLines()
    int i = 0
    while (i < lines.size()) {
        if (lines[i].startsWith('title:')) {
            return lines[i].substring(6).trim()
        }
        else {
            ++i
        }
    }
    return 'No Title'
}